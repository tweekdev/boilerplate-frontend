{"version":3,"sources":["user/components/new/NewInstrument.js"],"names":["toast","configure","NewTabs","auth","useContext","AuthContext","schema","Yup","shape","name","required","useHttpClient","error","sendRequest","clearError","userSubmitHandler","values","actions","a","JSON","stringify","Authorization","token","isSubmitting","resetForm","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","Fragment","onClear","className","onSubmit","initialValues","validationSchema","errors","touched","handleChange","handleBlur","handleSubmit","setFieldValue","type","onChange","onBlur","value","placeholder","disabled"],"mappings":"+PAYAA,IAAMC,YAiGSC,UA/FC,WACd,IAAMC,EAAOC,qBAAWC,KAClBC,EAASC,MAAaC,MAAM,CAChCC,KAAMF,MAAaG,SAAS,oCAHV,EAKuBC,cAAnCC,EALY,EAKZA,MAAOC,EALK,EAKLA,YAAaC,EALR,EAKQA,WAEtBC,EAAiB,uCAAG,WAAOC,EAAQC,GAAf,SAAAC,EAAA,+EAEhBL,EAAY,6BAEhB,OACAM,KAAKC,UAAU,CACbX,KAAMO,EAAOP,OAEf,CACE,eAAgB,mBAChBY,cAAe,UAAYlB,EAAKmB,QAVd,OAatBL,EAAQM,cAAe,EACvBN,EAAQO,YACRxB,IAAMyB,QAAQ,wBAAe,CAC3BC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAtBU,gDAyBtBjC,IAAMY,MAAM,kCAAyB,CACnCc,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAhCU,yDAAH,wDAqCvB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAYtB,MAAOA,EAAOuB,QAASrB,IACnC,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMsB,UAAU,aACd,wBAAIA,UAAU,kBAAd,yBACA,kBAAC,IAAD,CACEC,SAAUtB,EACVuB,cAAe,CACb7B,KAAM,IAER8B,iBAAkBjC,IAEjB,gBACCU,EADD,EACCA,OACAwB,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACArB,EAPD,EAOCA,aAPD,EAQCsB,cARD,OAUC,0BAAMR,SAAUO,EAAcR,UAAU,aACtC,yBAAKA,UAAW,cACd,kBAAC,IAAD,CACEA,UAAW,eACXU,KAAK,OACLrC,KAAK,OACLsC,SAAUL,EACVM,OAAQL,EACRM,MAAOjC,EAAOP,KACdyC,YAAa,QAEf,yBAAKd,UAAU,SACZI,EAAO/B,MAAQgC,EAAQhC,MAAQ+B,EAAO/B,OAG3C,yBAAK2B,UAAW,cACd,kBAAC,IAAD,CAAQU,KAAK,SAASK,SAAU5B,GAAhC","file":"static/js/15.ee700d1f.chunk.js","sourcesContent":["import { Field, Formik } from 'formik';\nimport React, { useContext } from 'react';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport * as Yup from 'yup';\nimport Button from '../../../shared/components/FormElements/Button';\nimport Card from '../../../shared/components/UIElements/Card';\nimport ErrorModal from '../../../shared/components/UIElements/ErrorModal';\nimport { AuthContext } from '../../../shared/context/auth-context';\nimport { useHttpClient } from '../../../shared/hooks/http-hook';\nimport './New.css';\n\ntoast.configure();\n\nconst NewTabs = () => {\n  const auth = useContext(AuthContext);\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Veuillez entrer un instrument.'),\n  });\n  const { error, sendRequest, clearError } = useHttpClient();\n\n  const userSubmitHandler = async (values, actions) => {\n    try {\n      await sendRequest(\n        `/api/tweektabs/instruments`,\n        'POST',\n        JSON.stringify({\n          name: values.name,\n        }),\n        {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + auth.token,\n        }\n      );\n      actions.isSubmitting = false;\n      actions.resetForm();\n      toast.success('ðŸ¦„ Success!', {\n        position: 'top-right',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    } catch (err) {\n      toast.error('ðŸ¦„ An error occurred!', {\n        position: 'top-right',\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <ToastContainer />\n      <Card className=\"add-admin\">\n        <h2 className=\"title-tabs-add\">Ajouter un instrument</h2>\n        <Formik\n          onSubmit={userSubmitHandler}\n          initialValues={{\n            name: '',\n          }}\n          validationSchema={schema}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n            setFieldValue,\n          }) => (\n            <form onSubmit={handleSubmit} className=\"tabs-form\">\n              <div className={'form-group'}>\n                <Field\n                  className={'form-control'}\n                  type=\"text\"\n                  name=\"name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                  placeholder={'Nom'}\n                />\n                <div className=\"error\">\n                  {errors.name && touched.name && errors.name}\n                </div>\n              </div>\n              <div className={'form-group'}>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  Soumettre\n                </Button>\n              </div>\n            </form>\n          )}\n        </Formik>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default NewTabs;\n"],"sourceRoot":""}