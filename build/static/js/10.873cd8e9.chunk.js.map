{"version":3,"sources":["tabs/components/TabsItem.js","tabs/components/TabsList.js","tabs/pages/Tabs.js"],"names":["TabsItem","props","isLoading","useHttpClient","key","id","className","LoadingSpinner","asOverlay","Card","i","name","chanteur","difficulty","type","instrument","to","TabsList","auth","useContext","AuthContext","useState","searchTerm","setSearchTerm","isVisible","setIsVisible","dif","Map","items","map","item","JSON","stringify","values","placeholder","onChange","e","target","value","tab","onClick","isLoggedIn","filter","val","toLowerCase","includes","file","Tabs","error","sendRequest","clearError","loadedTabs","setLoadTabs","useEffect","a","responseData","tabs","fetchTabs","ErrorModal","onClear"],"mappings":"uSA4EeA,G,OArEE,SAACC,GAAW,IACnBC,EAAcC,cAAdD,UAER,OACE,yBAAKE,IAAKH,EAAMI,GAAIC,UAAU,eAC3BJ,GAAa,kBAACK,EAAA,EAAD,CAAgBC,WAAS,IACvC,kBAACC,EAAA,EAAD,CACEH,UAAS,oBAAeL,EAAMS,EAAI,GAAK,EAAI,YAAc,aAEzD,yBAAKJ,UAAU,UACb,4BAAKL,EAAMU,OAGb,yBAAKL,UAAU,mBACb,yBAAKA,UAAU,aACb,2BACEA,UAAS,UACPL,EAAMS,EAAI,IAAM,EAAI,kBAAoB,mBAF5C,aAOA,gCAAMT,EAAMW,WAEd,yBAAKN,UAAU,aACb,2BACEA,UAAS,UACPL,EAAMS,EAAI,IAAM,EAAI,kBAAoB,mBAF5C,eAO2B,SAA1BT,EAAMY,WAAWF,KAChB,wBAAIL,UAAU,YAAYL,EAAMY,WAAWF,MACf,WAA1BV,EAAMY,WAAWF,KACnB,wBAAIL,UAAU,cAAcL,EAAMY,WAAWF,MACjB,SAA1BV,EAAMY,WAAWF,KACnB,wBAAIL,UAAU,YAAYL,EAAMY,WAAWF,MACzC,MAEN,yBAAKL,UAAU,aACb,2BACEA,UAAS,UACPL,EAAMS,EAAI,IAAM,EAAI,kBAAoB,mBAF5C,SAOA,gCAAMT,EAAMa,KAAKH,OAEnB,yBAAKL,UAAU,aACb,2BACEA,UAAS,UACPL,EAAMS,EAAI,IAAM,EAAI,kBAAoB,mBAF5C,eAOA,4BAAKT,EAAMc,WAAWJ,QAG1B,kBAAC,IAAD,CAAML,UAAU,cAAcU,GAAE,eAAUf,EAAMI,KAC9C,4BAAQC,UAAU,wBAAlB,gBC2FKW,G,OAxJE,SAAChB,GAChB,IAAMiB,EAAOC,qBAAWC,KADE,EAEUC,mBAAS,IAFnB,mBAEnBC,EAFmB,KAEPC,EAFO,OAGQF,oBAAS,GAHjB,mBAGnBG,EAHmB,KAGRC,EAHQ,KAKpBC,EAAG,YACJ,IAAIC,IACL1B,EAAM2B,MAAMC,KAAI,SAACC,GAAD,MAAU,CACxBC,KAAKC,UAAUF,EAAKjB,WAAWF,MAC/BmB,EAAKjB,WAAWF,UAElBsB,UAEEnB,EAAI,YACL,IAAIa,IACL1B,EAAM2B,MAAMC,KAAI,SAACC,GAAD,MAAU,CACxBC,KAAKC,UAAUF,EAAKhB,KAAKH,MACzBmB,EAAKhB,KAAKH,UAEZsB,UAEElB,EAAU,YACX,IAAIY,IACL1B,EAAM2B,MAAMC,KAAI,SAACC,GAAD,MAAU,CACxBC,KAAKC,UAAUF,EAAKf,WAAWJ,MAC/BmB,EAAKf,WAAWJ,UAElBsB,UAGJ,OACE,yBAAK3B,UAAU,gBACb,yBAAKA,UAAU,iBACZkB,GACC,yBAAKlB,UAAU,oBACb,2BACEA,UAAU,mCACVQ,KAAK,OACLoB,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOb,EAAca,EAAEC,OAAOC,UAE1C,4BACEhC,UAAU,4BACV6B,SAAU,SAACC,GAAD,OAAOb,EAAca,EAAEC,OAAOC,SAExC,4BAAQA,MAAM,IAAd,gBACCZ,EAAIG,KAAI,SAACU,EAAK7B,GAAN,OACP,4BAAQN,IAAKM,EAAG4B,MAAOC,GACpBA,OAIP,4BACEjC,UAAU,4BACV6B,SAAU,SAACC,GAAD,OAAOb,EAAca,EAAEC,OAAOC,SAExC,4BAAQA,MAAM,IAAd,UACCxB,EAAKe,KAAI,SAACU,EAAK7B,GAAN,OACR,4BAAQN,IAAKM,EAAG4B,MAAOC,GACpBA,OAIP,4BACEjC,UAAU,4BACV6B,SAAU,SAACC,GAAD,OAAOb,EAAca,EAAEC,OAAOC,SAExC,4BAAQA,MAAM,IAAd,gBACCvB,EAAWc,KAAI,SAACU,EAAK7B,GAAN,OACd,4BAAQN,IAAKM,EAAG4B,MAAOC,GACpBA,QAMX,yBAAKjC,UAAU,iBACb,4BACEA,UAAU,mBACVkC,QAAS,kBAAMf,GAAcD,KAE7B,kBAAC,IAAD,SAKLN,EAAKuB,YACJ,yBAAKnC,UAAU,qBACb,kBAAC,IAAD,CAAMU,GAAI,aACR,kBAAC,IAAD,QAKN,yBAAKV,UAAU,aACb,yBAAKA,UAAU,kBACb,0CACa,yCAEb,yJAKDL,EAAM2B,MACJc,QAAO,SAACC,GACP,MAAmB,KAAfrB,GAGFqB,EAAIhC,KAAKiC,cAAcC,SAASvB,EAAWsB,gBAI3CD,EAAI/B,SAASgC,cAAcC,SAASvB,EAAWsB,gBAI/CD,EAAI5B,WAAWJ,KACZiC,cACAC,SAASvB,EAAWsB,gBAIvBD,EAAI7B,KAAKH,KAAKiC,cAAcC,SAASvB,EAAWsB,gBAIhDD,EAAI9B,WAAWF,KACZiC,cACAC,SAASvB,EAAWsB,eAtBhBD,OAmBF,KAQRd,KAAI,SAACU,EAAK7B,GAAN,OACH,kBAAC,EAAD,CACEA,EAAGA,EACHN,IAAKmC,EAAIlC,GACTA,GAAIkC,EAAIlC,GACRM,KAAM4B,EAAI5B,KACVC,SAAU2B,EAAI3B,SACdC,WAAY0B,EAAI1B,WAChBC,KAAMyB,EAAIzB,KACVC,WAAYwB,EAAIxB,WAChB+B,KAAMP,EAAIO,c,OCpHTC,UA9BF,SAAC9C,GAAW,IAAD,EACgCE,cAA9CD,EADc,EACdA,UAAW8C,EADG,EACHA,MAAOC,EADJ,EACIA,YAAaC,EADjB,EACiBA,WADjB,EAEY7B,qBAFZ,mBAEf8B,EAFe,KAEHC,EAFG,KActB,OAVAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,+EAEaL,EAAY,uBAFzB,OAERM,EAFQ,OAGdH,EAAYG,EAAaC,MAHX,uGAAH,qDAMfC,KACC,CAACR,IAGF,yBAAK3C,UAAU,kBACb,kBAACoD,EAAA,EAAD,CAAYV,MAAOA,EAAOW,QAAST,IAEnC,yBAAK5C,UAAU,OACZJ,GACC,yBAAKI,UAAU,UACb,kBAACC,EAAA,EAAD,QAGFL,GAAaiD,GAAc,kBAAC,EAAD,CAAUvB,MAAOuB","file":"static/js/10.873cd8e9.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from '../../shared/components/UIElements/Card';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './TabsItem.css';\n\nconst TabsItem = (props) => {\n  const { isLoading } = useHttpClient();\n\n  return (\n    <div key={props.id} className=\"tabs--items\">\n      {isLoading && <LoadingSpinner asOverlay />}\n      <Card\n        className={`card-tabs ${props.i % 2 == 0 ? 'normalize' : 'inversed'}`}\n      >\n        <div className=\"header\">\n          <h3>{props.name}</h3>\n        </div>\n\n        <div className=\"tabs-item__info\">\n          <div className=\"tabs-data\">\n            <label\n              className={`${\n                props.i % 2 === 0 ? 'normalize-label' : 'inversed-label'\n              }`}\n            >\n              Chanteur:\n            </label>\n            <h4> {props.chanteur}</h4>\n          </div>\n          <div className=\"tabs-data\">\n            <label\n              className={`${\n                props.i % 2 === 0 ? 'normalize-label' : 'inversed-label'\n              }`}\n            >\n              Difficulty:\n            </label>\n            {props.difficulty.name === 'easy' ? (\n              <h4 className=\"dif easy\">{props.difficulty.name}</h4>\n            ) : props.difficulty.name === 'medium' ? (\n              <h4 className=\"dif medium\">{props.difficulty.name}</h4>\n            ) : props.difficulty.name === 'hard' ? (\n              <h4 className=\"dif hard\">{props.difficulty.name}</h4>\n            ) : null}\n          </div>\n          <div className=\"tabs-data\">\n            <label\n              className={`${\n                props.i % 2 === 0 ? 'normalize-label' : 'inversed-label'\n              }`}\n            >\n              Type:\n            </label>\n            <h4> {props.type.name}</h4>\n          </div>\n          <div className=\"tabs-data\">\n            <label\n              className={`${\n                props.i % 2 === 0 ? 'normalize-label' : 'inversed-label'\n              }`}\n            >\n              Instrument:\n            </label>\n            <h4>{props.instrument.name}</h4>\n          </div>\n        </div>\n        <Link className=\"tabs-choose\" to={`/tab/${props.id}`}>\n          <button className=\"pill button-reverse \">Choisir</button>\n        </Link>\n      </Card>\n    </div>\n  );\n};\n\nexport default TabsItem;\n","import AddIcon from '@material-ui/icons/Add';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React, { useContext, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport TabsItem from './TabsItem';\nimport './TabsList.css';\n\nconst TabsList = (props) => {\n  const auth = useContext(AuthContext);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isVisible, setIsVisible] = useState(false);\n\n  const dif = [\n    ...new Map(\n      props.items.map((item) => [\n        JSON.stringify(item.difficulty.name),\n        item.difficulty.name,\n      ])\n    ).values(),\n  ];\n  const type = [\n    ...new Map(\n      props.items.map((item) => [\n        JSON.stringify(item.type.name),\n        item.type.name,\n      ])\n    ).values(),\n  ];\n  const instrument = [\n    ...new Map(\n      props.items.map((item) => [\n        JSON.stringify(item.instrument.name),\n        item.instrument.name,\n      ])\n    ).values(),\n  ];\n\n  return (\n    <div className=\"tabs-content\">\n      <div className=\"header-search\">\n        {isVisible && (\n          <div className=\"search-container\">\n            <input\n              className=\"form-control search-tabs search1\"\n              type=\"text\"\n              placeholder=\"recherche\"\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n            <select\n              className=\"form-control search-tabs \"\n              onChange={(e) => setSearchTerm(e.target.value)}\n            >\n              <option value=\"\">difficulty :</option>\n              {dif.map((tab, i) => (\n                <option key={i} value={tab}>\n                  {tab}\n                </option>\n              ))}\n            </select>\n            <select\n              className=\"form-control search-tabs \"\n              onChange={(e) => setSearchTerm(e.target.value)}\n            >\n              <option value=\"\">Type :</option>\n              {type.map((tab, i) => (\n                <option key={i} value={tab}>\n                  {tab}\n                </option>\n              ))}\n            </select>\n            <select\n              className=\"form-control search-tabs \"\n              onChange={(e) => setSearchTerm(e.target.value)}\n            >\n              <option value=\"\">Instrument :</option>\n              {instrument.map((tab, i) => (\n                <option key={i} value={tab}>\n                  {tab}\n                </option>\n              ))}\n            </select>\n          </div>\n        )}\n        <div className=\"search-active\">\n          <button\n            className=\"btn-active-seach\"\n            onClick={() => setIsVisible(!isVisible)}\n          >\n            <SearchIcon />\n          </button>\n        </div>\n      </div>\n\n      {auth.isLoggedIn && (\n        <div className=\"add-new-container\">\n          <Link to={'/tabs/new'}>\n            <AddIcon />\n          </Link>\n        </div>\n      )}\n\n      <div className=\"tabs-list\">\n        <div className=\"descritif-tabs\">\n          <h1>\n            Toutes les <strong>tabs</strong>\n          </h1>\n          <p>\n            Envie d'apprendre et maitriser de nouvelles musiques par le biais de\n            tablatures ? Alors vous Ãªtes sur le bon chemin...\n          </p>\n        </div>\n        {props.items\n          .filter((val) => {\n            if (searchTerm === '') {\n              return val;\n            } else if (\n              val.name.toLowerCase().includes(searchTerm.toLowerCase())\n            ) {\n              return val;\n            } else if (\n              val.chanteur.toLowerCase().includes(searchTerm.toLowerCase())\n            ) {\n              return val;\n            } else if (\n              val.instrument.name\n                .toLowerCase()\n                .includes(searchTerm.toLowerCase())\n            ) {\n              return val;\n            } else if (\n              val.type.name.toLowerCase().includes(searchTerm.toLowerCase())\n            ) {\n              return val;\n            } else if (\n              val.difficulty.name\n                .toLowerCase()\n                .includes(searchTerm.toLowerCase())\n            ) {\n              return val;\n            }\n          })\n          .map((tab, i) => (\n            <TabsItem\n              i={i}\n              key={tab.id}\n              id={tab.id}\n              name={tab.name}\n              chanteur={tab.chanteur}\n              difficulty={tab.difficulty}\n              type={tab.type}\n              instrument={tab.instrument}\n              file={tab.file}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TabsList;\n","import React, { useEffect, useState } from 'react';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport TabsList from '../components/TabsList';\nimport './Tabs.css';\nconst Tabs = (props) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedTabs, setLoadTabs] = useState();\n\n  useEffect(() => {\n    const fetchTabs = async () => {\n      try {\n        const responseData = await sendRequest(`/api/tweektabs/tabs`);\n        setLoadTabs(responseData.tabs);\n      } catch (err) {}\n    };\n    fetchTabs();\n  }, [sendRequest]);\n\n  return (\n    <div className=\"main main-tabs\">\n      <ErrorModal error={error} onClear={clearError} />\n\n      <div className=\"tab\">\n        {isLoading && (\n          <div className=\"center\">\n            <LoadingSpinner />\n          </div>\n        )}\n        {!isLoading && loadedTabs && <TabsList items={loadedTabs} />}\n      </div>\n    </div>\n  );\n};\n\nexport default Tabs;\n"],"sourceRoot":""}