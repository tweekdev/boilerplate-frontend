{"version":3,"sources":["user/pages/Auth.js"],"names":["Auth","schema","Yup","shape","email","required","password","history","useHistory","useState","passwordFieldVisible","setPasswordFieldVisible","auth","useContext","AuthContext","isLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","authSubmitHandler","values","actions","a","JSON","stringify","Authorization","token","responseData","login","userId","role","pseudo","picture","isSubmitting","resetForm","push","className","onClear","asOverlay","onSubmit","initialValues","validationSchema","errors","touched","handleChange","handleBlur","handleSubmit","type","name","onChange","onBlur","value","placeholder","onClick","disabled","to"],"mappings":"+PAwIeA,UA3HF,WACX,IAAMC,EAASC,MAAaC,MAAM,CAChCC,MAAOF,MACJE,MAAM,mBACNC,SAAS,6BACZC,SAAUJ,MAAaG,SAAS,sCAG5BE,EAAUC,uBARC,EASuCC,oBAAS,GAThD,mBASVC,EATU,KASYC,EATZ,KAUXC,EAAOC,qBAAWC,KAVP,EAWqBL,oBAAS,GAX9B,mBAWVM,EAXU,aAYqCC,eAA9CC,EAZS,EAYTA,UAAWC,EAZF,EAYEA,MAAOC,EAZT,EAYSA,YAAaC,EAZtB,EAYsBA,WAEjCC,EAAiB,uCAAG,WAAOC,EAAQC,GAAf,eAAAC,EAAA,0DACpBT,EADoB,0CAGOI,EAAY,6BAErC,OACAM,KAAKC,UAAU,CACbtB,MAAOkB,EAAOlB,MACdE,SAAUgB,EAAOhB,WAEnB,CACE,eAAgB,mBAChBqB,cAAe,UAAYf,EAAKgB,QAZhB,OAGdC,EAHc,OAepBjB,EAAKkB,MACHD,EAAaE,OACbF,EAAaD,MACbC,EAAaG,KAAK,GAClBH,EAAaI,OACbJ,EAAaK,SAEfX,EAAQY,cAAe,EACvBZ,EAAQa,YACR7B,EAAQ8B,KAAK,SAxBO,4GAAH,wDA4BvB,OACE,yBAAKC,UAAU,aACb,kBAAC,IAAD,CAAYpB,MAAOA,EAAOqB,QAASnB,IAClCH,EACC,kBAAC,IAAD,CAAgBuB,WAAS,IAEzB,kBAAC,IAAD,CAAMF,UAAU,kBACd,wBAAIA,UAAU,eAAd,aACA,kBAAC,IAAD,CACEG,SAAUpB,EACVqB,cAAe,CACbtC,MAAO,GACPE,SAAU,IAEZqC,iBAAkB1C,IAEjB,gBACCqB,EADD,EACCA,OACAsB,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAb,EAPD,EAOCA,aAPD,OASC,0BAAMM,SAAUO,GACd,yBAAKV,UAAW,cACd,kBAAC,IAAD,CACEA,UAAW,eACXW,KAAK,OACLC,KAAK,QACLC,SAAUL,EACVM,OAAQL,EACRM,MAAO/B,EAAOlB,MACdkD,YAAa,UAEf,yBAAKhB,UAAU,SACZM,EAAOxC,OAASyC,EAAQzC,OAASwC,EAAOxC,QAG7C,yBAAKkC,UAAW,uCACd,kBAAC,IAAD,CACEA,UAAW,eACXW,KAAMvC,EAAuB,OAAS,WACtCwC,KAAK,WACLC,SAAUL,EACVM,OAAQL,EACRM,MAAO/B,EAAOhB,SACdgD,YAAa,aAEf,kBAAC,IAAD,CACEC,QAAS,kBACP5C,GAAyBD,MAG7B,2BAAO4B,UAAU,sBAAjB,wBAGA,yBAAKA,UAAU,SACZM,EAAOtC,UAAYuC,EAAQvC,UAAYsC,EAAOtC,WAInD,kBAAC,IAAD,CAAQ2C,KAAK,SAASO,SAAUrB,GAAhC,oBAMN,kBAAC,IAAD,CAAMG,UAAU,WAAWmB,GAAE,WAA7B,cAGA,kBAAC,IAAD,CAAMnB,UAAU,qBAAqBmB,GAAE,mBAAvC","file":"static/js/16.4501532b.chunk.js","sourcesContent":["import { Checkbox } from '@material-ui/core';\nimport { Field, Formik } from 'formik';\nimport React, { useContext, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './Auth.css';\n\nconst Auth = () => {\n  const schema = Yup.object().shape({\n    email: Yup.string()\n      .email('Email invalide.')\n      .required('Veuillez entrer un Email.'),\n    password: Yup.string().required('Veuillez entrer un mot de passe.'),\n  });\n\n  const history = useHistory();\n  const [passwordFieldVisible, setPasswordFieldVisible] = useState(false);\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const authSubmitHandler = async (values, actions) => {\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          `/api/tweektabs/users/login`,\n          'POST',\n          JSON.stringify({\n            email: values.email,\n            password: values.password,\n          }),\n          {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + auth.token,\n          }\n        );\n        auth.login(\n          responseData.userId,\n          responseData.token,\n          responseData.role[0],\n          responseData.pseudo,\n          responseData.picture\n        );\n        actions.isSubmitting = false;\n        actions.resetForm();\n        history.push('/tabs');\n      } catch (err) {}\n    }\n  };\n  return (\n    <div className=\"auth-page\">\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading ? (\n        <LoadingSpinner asOverlay />\n      ) : (\n        <Card className=\"authentication\">\n          <h2 className=\"title__auth\">Connexion</h2>\n          <Formik\n            onSubmit={authSubmitHandler}\n            initialValues={{\n              email: '',\n              password: '',\n            }}\n            validationSchema={schema}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              isSubmitting,\n            }) => (\n              <form onSubmit={handleSubmit}>\n                <div className={'form-group'}>\n                  <Field\n                    className={'form-control'}\n                    type=\"text\"\n                    name=\"email\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.email}\n                    placeholder={'Email'}\n                  />\n                  <div className=\"error\">\n                    {errors.email && touched.email && errors.email}\n                  </div>\n                </div>\n                <div className={'form-group show-password-auth-check'}>\n                  <Field\n                    className={'form-control'}\n                    type={passwordFieldVisible ? 'text' : 'password'}\n                    name=\"password\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.password}\n                    placeholder={'Password'}\n                  />\n                  <Checkbox\n                    onClick={() =>\n                      setPasswordFieldVisible(!passwordFieldVisible)\n                    }\n                  />\n                  <label className=\"show-password-auth\">\n                    Voir le mot de passe\n                  </label>\n                  <div className=\"error\">\n                    {errors.password && touched.password && errors.password}\n                  </div>\n                </div>\n\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  Se connecter\n                </Button>\n              </form>\n            )}\n          </Formik>\n          <Link className=\"user-add\" to={`/signup`}>\n            S'inscrire\n          </Link>\n          <Link className=\"user-password-lost\" to={`/forgotpassword`}>\n            Mot de passe oubli√© ?\n          </Link>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}