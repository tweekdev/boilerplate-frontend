{"version":3,"sources":["user/pages/Signup.js"],"names":["NewUser","schema","Yup","shape","pseudo","required","min","firstname","name","email","picture","password","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","history","useHistory","useState","passwordFieldVisible","setPasswordFieldVisible","userSubmitHandler","values","actions","a","formData","FormData","append","responseData","login","userId","token","role","isSubmitting","resetForm","push","className","onClear","asOverlay","onSubmit","initialValues","validationSchema","errors","touched","handleChange","handleBlur","handleSubmit","setFieldValue","id","type","onChange","event","currentTarget","files","accept","onBlur","value","placeholder","onClick","disabled","to"],"mappings":"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","file":"static/js/17.7117a3d1.chunk.js","sourcesContent":["import { Checkbox } from '@material-ui/core';\nimport { Field, Formik } from 'formik';\nimport React, { useContext, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './Auth.css';\n\nconst NewUser = () => {\n  const schema = Yup.object().shape({\n    pseudo: Yup.string()\n      .required('Veuillez entrer un pseudo.')\n      .min(4, 'Le pseudo est trop court.'),\n    firstname: Yup.string().required('Veuillez entrer un prénom.'),\n    name: Yup.string().required('Veuillez entrer un nom.'),\n    email: Yup.string()\n      .email('Email invalide.')\n      .required('Veuillez entrer un Email.'),\n    picture: Yup.string().required('Veuillez insérer une image.'),\n    password: Yup.string()\n      .required('Veuillez entrer un mot de passe.')\n      .min(6, 'Le mot de passe est trop court 6 caractères minimum.'),\n  });\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const history = useHistory();\n  const [passwordFieldVisible, setPasswordFieldVisible] = useState(false);\n\n  const userSubmitHandler = async (values, actions) => {\n    try {\n      const formData = new FormData();\n      formData.append('name', values.name);\n      formData.append('firstname', values.firstname);\n      formData.append('pseudo', values.pseudo);\n      formData.append('email', values.email);\n      formData.append('password', values.password);\n      formData.append('picture', values.picture);\n      formData.append('tabs', []);\n      formData.append('news', []);\n      const responseData = await sendRequest(\n        `/api/tweektabs/users/signup`,\n        'POST',\n        formData,\n      );\n      auth.login(\n        responseData.userId,\n        responseData.token,\n        responseData.role[0],\n        responseData.pseudo,\n        responseData.picture\n      );\n      actions.isSubmitting = false;\n      actions.resetForm();\n      history.push('/tabs');\n    } catch (err) {}\n  };\n\n  return (\n    <div className=\"main auth-page signup\">\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading ? (\n        <LoadingSpinner asOverlay />\n      ) : (\n        <Card className=\"authentication\">\n          <h2 className=\"title__auth\">S'inscrire</h2>\n          <Formik\n            onSubmit={userSubmitHandler}\n            initialValues={{\n              pseudo: '',\n              firstname: '',\n              name: '',\n              password: '',\n              email: '',\n              role: '',\n              picture: '',\n            }}\n            validationSchema={schema}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              isSubmitting,\n              setFieldValue,\n            }) => (\n              <form onSubmit={handleSubmit}>\n                <div className={'form-group'}>\n                  <input\n                    id=\"picture\"\n                    name=\"picture\"\n                    className=\"form-control\"\n                    type=\"file\"\n                    onChange={(event) => {\n                      setFieldValue('picture', event.currentTarget.files[0]);\n                    }}\n                    values={values.picture}\n                    accept=\".jpg,.png,.jpeg\"\n                  />\n                  <div className=\"error\">\n                    {errors.picture && touched.picture && errors.picture}\n                  </div>\n                </div>\n                <div className={'form-group'}>\n                  <Field\n                    className={'form-control'}\n                    type=\"text\"\n                    name=\"pseudo\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.pseudo}\n                    placeholder={'Pseudo'}\n                  />\n                  <div className=\"error\">\n                    {errors.pseudo && touched.pseudo && errors.pseudo}\n                  </div>\n                </div>\n                <div className={'form-group'}>\n                  <Field\n                    className={'form-control'}\n                    type=\"text\"\n                    name=\"firstname\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.firstname}\n                    placeholder={'Prénom'}\n                  />\n                  <div className=\"error\">\n                    {errors.firstname && touched.firstname && errors.firstname}\n                  </div>\n                </div>\n\n                <div className={'form-group'}>\n                  <Field\n                    className={'form-control'}\n                    type=\"text\"\n                    name=\"name\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.name}\n                    placeholder={'Nom'}\n                  />\n                  <div className=\"error\">\n                    {errors.name && touched.name && errors.name}\n                  </div>\n                </div>\n                <div className={'form-group'}>\n                  <Field\n                    className={'form-control'}\n                    type=\"text\"\n                    name=\"email\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.email}\n                    placeholder={'Email'}\n                  />\n                  <div className=\"error\">\n                    {errors.email && touched.email && errors.email}\n                  </div>\n                </div>\n                <div className={'form-group show-password-auth-check'}>\n                  <Field\n                    className={'form-control'}\n                    type={passwordFieldVisible ? 'text' : 'password'}\n                    name=\"password\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.password}\n                    placeholder={'Mot de passe'}\n                  />\n                  <Checkbox\n                    onClick={() =>\n                      setPasswordFieldVisible(!passwordFieldVisible)\n                    }\n                  />\n                  <label className=\"show-password-auth\">\n                    Voir le mot de passe\n                  </label>\n                  <div className=\"error\">\n                    {errors.password && touched.password && errors.password}\n                  </div>\n                </div>\n                <div className={'form-group'}>\n                  <Button type=\"submit\" disabled={isSubmitting}>\n                    Soumettre\n                  </Button>\n                </div>\n              </form>\n            )}\n          </Formik>\n          <Link className=\"user-add\" to={`/auth`}>\n            Se connecter\n          </Link>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default NewUser;\n"],"sourceRoot":""}